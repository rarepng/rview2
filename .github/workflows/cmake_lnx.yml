name: linux x64
            
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

    - name: installing cmake 4
      run: |
        sudo apt-get remove --purge -y cmake
        wget https://github.com/Kitware/CMake/releases/download/v4.0.3/cmake-4.0.3-linux-x86_64.sh
        chmod +x cmake-4.0.3-linux-x86_64.sh
        sudo ./cmake-4.0.3-linux-x86_64.sh --skip-license --prefix=/usr/local
    - name: downloading latest slang
      run: |
        url=$(curl -s https://api.github.com/repos/shader-slang/slang/releases/latest | jq -r '.assets[] | select(.name | endswith("linux-x86_64.tar.gz")) | .browser_download_url')
        mkdir -p ~/slang && curl -L "$url" | tar -xz -C ~/slang
        ls ~/slang
        ~/slang/bin/slangc -v
    - name: update submodules
      run: |
        git submodule update --init --recursive
    - name: installing more depens
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev libprotobuf-dev protobuf-compiler ninja-build libwayland-dev libxkbcommon-dev xorg-dev p7zip xvfb
    - name: installing vulkan sdk
      run: |
        rm -r -f /home/runner/vulk
        mkdir /home/runner/vulk
        cd /home/runner/vulk
        curl -L https://sdk.lunarg.com/sdk/download/latest/linux/vulkan_sdk.tar.xz | tar -xJ -C .
        mv $(ls | head -n 1)/x86_64/* .
        rm -r $(ls | head -n 1)
        export VULKAN_SDK=/home/runner/vulk
        export PATH=$VULKAN_SDK/bin:$PATH
        export LD_LIBRARY_PATH=$VULKAN_SDK/lib:$LD_LIBRARY_PATH
        export VK_ICD_FILENAMES=$VULKAN_SDK/etc/vulkan/icd.d
        export VK_LAYER_PATH=$VULKAN_SDK/etc/vulkan/explicit_layer.d
        echo VULKAN_SDK=/home/runner/vulk >> $GITHUB_ENV
        echo PATH=$VULKAN_SDK/bin:$PATH >> $GITHUB_ENV
        echo LD_LIBRARY_PATH=$VULKAN_SDK/lib:$LD_LIBRARY_PATH >> $GITHUB_ENV
        echo VK_ICD_FILENAMES=$VULKAN_SDK/etc/vulkan/icd.d >> $GITHUB_ENV
        echo VK_LAYER_PATH=$VULKAN_SDK/etc/vulkan/explicit_layer.d >> $GITHUB_ENV
        echo LD_LIBRARY_PATH=/home/runner/work/rview2/rview2/lib:$LD_LIBRARY_PATH >> $GITHUB_ENV
        sudo ldconfig
    # - name: downloading latest slang AGAIN
    #   run: |
    #     url=$(curl -s https://api.github.com/repos/shader-slang/slang/releases/latest | jq -r '.assets[] | select(.name | endswith("linux-x86_64.tar.gz")) | .browser_download_url')
    #     mkdir -p ~/slang && curl -L "$url" | tar -xz -C ~/slang
    #     ls ~/slang
    #     ~/slang/bin/slangc -v
    - name: verifying vulkan & slang AGAIN!!
      run: |
        url=$(curl -s https://api.github.com/repos/shader-slang/slang/releases/latest | jq -r '.assets[] | select(.name | endswith("linux-x86_64.tar.gz")) | .browser_download_url')
        mkdir -p ~/slang2 && curl -L "$url" | tar -xz -C ~/slang2
        ls ~/slang2
        ~/slang2/bin/slangc -v
        ~/slang/bin/slangc -v
        mkdir -p $VULKAN_SDK/bin
        sudo rm -rf $VULKAN_SDK/bin/slangc
        sudo cp -v -f ~/slang/bin/* $VULKAN_SDK/bin
        sudo cp -v -f ~/slang/bin/slangc $VULKAN_SDK/bin/slangc
        sudo cp -v -f ~/slang2/bin/* $VULKAN_SDK/bin
        sudo cp -v -f ~/slang2/bin/slangc $VULKAN_SDK/bin/slangc
        echo "\n"
        $VULKAN_SDK/bin/slangc -v
        echo "\n"
        slangc -v
        echo "\n"
        ~/slang/bin/slangc -v
        ~/slang2/bin/slangc -v
        echo "\n"
        which slangc
        echo "\n"
        ls -lah ~/slang/bin/slangc
        ls -lah ~/slang2/bin/slangc
        ls -lah $VULKAN_SDK/bin/slangc
        md5sum ~/slang2/bin/slangc
        md5sum ~/slang/bin/slangc
        md5sum $VULKAN_SDK/bin/slangc
    - name: downloading resources
      run: |
        mkdir /home/runner/work/rview2/rview2/resources
        cd /home/runner/work/rview2/rview2/resources
        curl -L "https://drive.google.com/uc?export=download&id=1ZwYuB17yq-yRpswRISuvSG-_R7j5GKM9" -o x.7z
        7z x x.7z -aoa
        rm x.7z

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -G Ninja
        -S ${{ github.workspace }}

    - name: Build
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ninja

    - name: headless glfw virutal display
      run: Xvfb :99 -screen 0 1920x1080x24 &
      env:
        DISPLAY: :99

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ls -laR
    - name: resources n shaders
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        ls resources
        ls shaders
        
    - name: ctest
      run: ctest --build-config ${{ matrix.build_type }}
      
    - name: swiftshader test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        ./rview2 &
