name: windows x64 
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
    - uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: >-
            make
            mingw-w64-x86_64-gcc
    - name: update submodules
      run: |
        git submodule update --init --recursive
    - name: installing more depens
      run: |
        choco install -y ninja 7zip
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' --apply-install-arguments-to-dependencies
        cd D:/a/rview2/rview2
        # curl -L "https://github.com/openssl/openssl/releases/download/openssl-3.5.0/openssl-3.5.0.tar.gz" | tar -xz     #doesnt work on runner
        pwsh -c 'curl -L "https://github.com/openssl/openssl/releases/download/openssl-3.5.0/openssl-3.5.0.tar.gz" -o ossl.tar.gz'
        tar -xvzf ossl.tar.gz
        $url = curl -L "https://api.github.com/repos/shader-slang/slang/releases/latest" | ForEach-Object { $_.assets } | Where-Object { $_.name -like "*windows-x86_64.tar.gz" } | Select-Object -ExpandProperty browser_download_url
        mkdir D:/a/slang
        cd D:/a/slang
        curl -L $url -o slang.tar.gz
        ls
        pwd
        7z x slang.tar.gz -aoa
        ls
        7z x slang.tar -aoa
        ls
        # rm slang.tar.gz
        # rm slang.tar
    - shell: msys2 {0}
      run: |
        cd /d/a/rview2/rview2/openssl-3.5.0
        # echo y | pacman -S make
        export OPENSSL_USE_STATIC_LIBS=ON
        ./Configure --prefix=$PWD/dist no-idea no-mdc2 no-rc5 no-shared mingw64
        make depend && make && make install
    - name: set openssl
      run: |
        $env:OPENSSL_ROOT_DIR="D:/a/rview2/rview2/openssl-3.5.0/dist"
        $env:PATH="D:/a/rview2/rview2/openssl-3.5.0/dist/bin;$env:PATH"
        echo "OPENSSL_ROOT_DIR=D:/a/rview2/rview2/openssl-3.5.0/dist" | tee -a $env:GITHUB_ENV
        echo "PATH=$env:PATH" | tee -a $env:GITHUB_ENV
    - name: installing vulkan sdk
      run: |
        mkdir D:/a/vulk_inst
        mkdir D:/a/vulk
        cd D:/a/vulk_inst
        curl -L https://sdk.lunarg.com/sdk/download/latest/windows/vulkan_sdk.exe -o sdk.exe
        ./sdk.exe --root D:/a/vulk --accept-licenses --default-answer --confirm-command install
        rm sdk.exe
        $env:VULKAN_SDK="D:/a/vulk"
        $env:SLANG_SDK="D:/a/slang"
        $env:PATH="$env:SLANG_SDK/bin;$env:VULKAN_SDK/bin;$env:PATH"
        $env:LD_LIBRARY_PATH="D:/a/work/rview2/rview2/lib;$env:SLANG_SDK/lib;$env:VULKAN_SDK/lib;$env:LD_LIBRARY_PATH"
        $env:VK_ICD_FILENAMES="$env:VULKAN_SDK/etc/vulkan/icd.d"
        $env:VK_LAYER_PATH="$env:VULKAN_SDK/etc/vulkan/explicit_layer.d"
        echo VULKAN_SDK=$env:VULKAN_SDK  | tee -a $env:GITHUB_ENV
        echo PATH=$env:PATH  | tee -a $env:GITHUB_ENV
        echo LD_LIBRARY_PATH=$env:LD_LIBRARY_PATH  | tee -a $env:GITHUB_ENV
        echo VK_ICD_FILENAMES=$env:VULKAN_SDK/etc/vulkan/icd.d  | tee -a $env:GITHUB_ENV
        echo VK_LAYER_PATH=$env:VULKAN_SDK/etc/vulkan/explicit_layer.d  | tee -a $env:GITHUB_ENV
    - name: verifying vulkan
      run: |
        pwsh -c "$env:VULKAN_SDK/bin/glslc --version"
        echo $VULKAN_SDK
        ls -r $VULKAN_SDK
    - name: downloading resources
      run: |
        mkdir D:/a/rview2/rview2/resources
        cd D:/a/rview2/rview2/resources
        curl -L "https://drive.google.com/uc?export=download&id=1ZwYuB17yq-yRpswRISuvSG-_R7j5GKM9" -o x.7z
        7z x x.7z -aoa
        rm x.7z

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -G Ninja
        -S ${{ github.workspace }}

    - name: Build
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ninja
    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ls -r
    - name: resources n shaders
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        ls resources
        ls shaders
    - name: ctest
      run: ctest --build-config ${{ matrix.build_type }}
    - name: swiftshader test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        ./rview2 &
